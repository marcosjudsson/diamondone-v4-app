<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calculadora de Plano de Pagamentos</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .card {
            background-color: white;
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }
        .result-card {
            transition: opacity 0.5s ease-in-out;
        }
        .status-ok {
            background-color: #10B981; /* bg-green-500 */
            color: white;
        }
        .status-error {
            background-color: #EF4444; /* bg-red-500 */
            color: white;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen flex items-center justify-center p-4">

    <main class="max-w-4xl w-full">
        <h1 class="text-3xl font-bold text-center text-gray-800 mb-8">Calculadora de Plano de Pagamentos</h1>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            <!-- Coluna de Controles -->
            <div class="card">
                <h2 class="text-xl font-semibold text-gray-700 mb-4">Painel de Controle</h2>
                <form id="payment-form" class="space-y-4">
                    <div>
                        <label for="valorTotal" class="block text-sm font-medium text-gray-600">Valor Total do Contrato</label>
                        <div class="mt-1 relative rounded-md shadow-sm">
                            <div class="pointer-events-none absolute inset-y-0 left-0 pl-3 flex items-center">
                                <span class="text-gray-500 sm:text-sm">R$</span>
                            </div>
                            <input type="number" id="valorTotal" value="10000" step="0.01" class="block w-full rounded-md border-gray-300 pl-10 pr-4 py-2 focus:ring-indigo-500 focus:border-indigo-500" placeholder="0.00">
                        </div>
                    </div>
                    <div>
                        <label for="dataInicio" class="block text-sm font-medium text-gray-600">Data de Início do Contrato</label>
                        <input type="date" id="dataInicio" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-indigo-500 focus:border-indigo-500 py-2 px-3">
                    </div>
                    <div>
                        <label for="numParcelas" class="block text-sm font-medium text-gray-600">Número Total de Parcelas</label>
                        <input type="number" id="numParcelas" value="5" min="1" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-indigo-500 focus:border-indigo-500 py-2 px-3">
                    </div>
                    <div>
                        <label for="prazoEntrada" class="block text-sm font-medium text-gray-600">Prazo para Entrada (dias)</label>
                        <select id="prazoEntrada" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-indigo-500 focus:border-indigo-500 py-2 px-3">
                            <option value="7">7 dias</option>
                            <option value="15" selected>15 dias</option>
                        </select>
                    </div>
                    <div>
                        <label for="arredondar" class="block text-sm font-medium text-gray-600">Arredondar para o múltiplo de:</label>
                        <input type="number" id="arredondar" value="10" min="1" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-indigo-500 focus:border-indigo-500 py-2 px-3">
                    </div>
                    <div>
                        <label for="percEntrada" class="block text-sm font-medium text-gray-600">% Alvo para a Entrada</label>
                        <div class="mt-1 relative rounded-md shadow-sm">
                             <input type="number" id="percEntrada" value="35" min="1" max="100" class="block w-full rounded-md border-gray-300 pr-8 pl-4 py-2 focus:ring-indigo-500 focus:border-indigo-500" placeholder="35">
                             <div class="pointer-events-none absolute inset-y-0 right-0 pr-3 flex items-center">
                                <span class="text-gray-500 sm:text-sm">%</span>
                            </div>
                        </div>
                    </div>
                    <button type="submit" class="w-full bg-indigo-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 ease-in-out">
                        Calcular Plano
                    </button>
                </form>
            </div>

            <!-- Coluna de Resultados -->
            <div id="results-container" class="opacity-0">
                <!-- Painel de Validação -->
                <div id="validation-panel" class="card"></div>

                <!-- Tabela de Pagamentos -->
                <div id="payment-plan" class="card">
                    <h2 class="text-xl font-semibold text-gray-700 mb-4">Plano de Pagamentos Detalhado</h2>
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Parcela</th>
                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Data de Vencimento</th>
                                    <th class="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Valor da Parcela</th>
                                </tr>
                            </thead>
                            <tbody id="payment-table-body" class="bg-white divide-y divide-gray-200">
                                <!-- Linhas serão inseridas aqui via JS -->
                            </tbody>
                             <tfoot class="bg-gray-50 font-bold">
                                <tr>
                                    <td colspan="2" class="px-4 py-3 text-left text-sm text-gray-700">TOTAL</td>
                                    <td id="total-amount" class="px-4 py-3 text-right text-sm text-gray-700"></td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <!-- Modal de Erro -->
        <div id="error-modal" class="hidden fixed z-10 inset-0 overflow-y-auto">
            <div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
                <div class="fixed inset-0 transition-opacity" aria-hidden="true">
                    <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
                </div>
                <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
                <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
                    <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                        <div class="sm:flex sm:items-start">
                            <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                                <svg class="h-6 w-6 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                                </svg>
                            </div>
                            <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                                <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">Erro de Validação</h3>
                                <div class="mt-2">
                                    <p id="modal-message" class="text-sm text-gray-500">Por favor, preencha todos os campos corretamente.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                        <button type="button" id="close-modal-btn" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none sm:ml-3 sm:w-auto sm:text-sm">
                            Entendido
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script>
        // --- Funções de Lógica ---

        // Função para arredondar para o múltiplo mais próximo
        function mround(number, multiple) {
            if (multiple === 0) return number;
            return Math.round(number / multiple) * multiple;
        }

        // Função para formatar moeda (BRL)
        function formatCurrency(value) {
            return value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
        }

        // Função para formatar data (dd/mm/yyyy)
        function formatDate(date) {
            // Adiciona o fuso horário para evitar problemas de um dia a menos
            const userTimezoneOffset = date.getTimezoneOffset() * 60000;
            const correctedDate = new Date(date.getTime() + userTimezoneOffset);
            return correctedDate.toLocaleDateString('pt-BR');
        }
        
        // Função para adicionar meses a uma data
        function addMonths(date, months) {
            const d = new Date(date);
            d.setMonth(d.getMonth() + months);
            // Tratamento para casos como 31 de Jan + 1 mês -> deve ser 28/29 de Fev, não 3 de Março
            if (d.getDate() !== new Date(date).getDate()) {
                d.setDate(0);
            }
            return d;
        }


        // --- Lógica Principal do Formulário ---
        const form = document.getElementById('payment-form');
        const resultsContainer = document.getElementById('results-container');
        const validationPanel = document.getElementById('validation-panel');
        const tableBody = document.getElementById('payment-table-body');
        const totalAmountCell = document.getElementById('total-amount');

        // Define a data de hoje no campo de data
        document.getElementById('dataInicio').valueAsDate = new Date();

        form.addEventListener('submit', function(event) {
            event.preventDefault(); // Impede o envio padrão do formulário

            // 1. Obter e validar os valores de entrada
            const valorTotal = parseFloat(document.getElementById('valorTotal').value);
            const dataInicioStr = document.getElementById('dataInicio').value;
            const numParcelas = parseInt(document.getElementById('numParcelas').value);
            const prazoEntrada = parseInt(document.getElementById('prazoEntrada').value);
            const arredondar = parseFloat(document.getElementById('arredondar').value);
            const percEntrada = parseFloat(document.getElementById('percEntrada').value) / 100;

            if (!valorTotal || !dataInicioStr || !numParcelas || !prazoEntrada || !arredondar || !percEntrada) {
                showErrorModal('Por favor, preencha todos os campos do formulário.');
                return;
            }
            const dataInicio = new Date(dataInicioStr);

            // 2. Limpar resultados anteriores
            tableBody.innerHTML = '';
            validationPanel.innerHTML = '';

            // 3. Calcular o plano de pagamentos
            let pagamentos = [];
            let totalPago = 0;

            // Calcular Entrada
            const dataEntrada = new Date(dataInicio);
            dataEntrada.setDate(dataEntrada.getDate() + prazoEntrada);
            const valorEntrada = mround(valorTotal * percEntrada, arredondar);
            pagamentos.push({
                descricao: 'Entrada',
                data: dataEntrada,
                valor: valorEntrada
            });
            totalPago += valorEntrada;

            // Calcular Parcelas
            const valorRestante = valorTotal - valorEntrada;
            // O valor "padrão" da parcela é uma estimativa. O ajuste final é feito na última.
            const valorParcelaPadrao = mround(valorRestante / numParcelas, arredondar);
            let dataParcelaAnterior = dataEntrada;

            for (let i = 1; i <= numParcelas; i++) {
                let valorParcelaAtual;
                const dataVencimento = addMonths(dataParcelaAnterior, 1);
                
                if (i < numParcelas) {
                    valorParcelaAtual = valorParcelaPadrao;
                    // Garante que não ultrapasse o total
                    if (totalPago + valorParcelaAtual > valorTotal) {
                         valorParcelaAtual = mround(valorTotal - totalPago, arredondar);
                    }
                } else { // Última parcela
                    valorParcelaAtual = valorTotal - totalPago;
                }
                
                pagamentos.push({
                    descricao: `Parcela ${i}`,
                    data: dataVencimento,
                    valor: valorParcelaAtual
                });
                totalPago += valorParcelaAtual;
                dataParcelaAnterior = dataVencimento;
            }
            
            // Ajuste final na última parcela para garantir que a soma seja exata
            const diferencaFinal = valorTotal - pagamentos.reduce((sum, p) => sum + p.valor, 0);
            if (diferencaFinal !== 0 && pagamentos.length > 1) {
                pagamentos[pagamentos.length - 1].valor += diferencaFinal;
            }

            // 4. Preencher a tabela de resultados
            let totalFinalCalculado = 0;
            pagamentos.forEach(p => {
                const row = `<tr>
                    <td class="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-800">${p.descricao}</td>
                    <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-600">${formatDate(p.data)}</td>
                    <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-600 text-right">${formatCurrency(p.valor)}</td>
                </tr>`;
                tableBody.innerHTML += row;
                totalFinalCalculado += p.valor;
            });
            totalAmountCell.textContent = formatCurrency(totalFinalCalculado);


            // 5. Calcular e exibir o painel de validação
            const dataLimite = new Date(dataInicio);
            dataLimite.setDate(dataLimite.getDate() + 45);

            const valorAcumulado = pagamentos
                .filter(p => p.data <= dataLimite)
                .reduce((sum, p) => sum + p.valor, 0);
            
            const percAcumulado = valorAcumulado / valorTotal;
            const metaAtingida = percAcumulado >= 0.5;

            const statusClass = metaAtingida ? 'status-ok' : 'status-error';
            const statusText = metaAtingida ? 'META ATINGIDA' : 'AJUSTAR % DA ENTRADA';

            validationPanel.innerHTML = `
                <h2 class="text-xl font-semibold text-gray-700 mb-4">Painel de Validação</h2>
                <div class="space-y-3">
                    <div class="flex justify-between">
                        <span class="text-sm font-medium text-gray-600">Data Limite (45 dias):</span>
                        <span class="text-sm text-gray-800 font-semibold">${formatDate(dataLimite)}</span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-sm font-medium text-gray-600">Valor Acumulado na Data:</span>
                        <span class="text-sm text-gray-800 font-semibold">${formatCurrency(valorAcumulado)}</span>
                    </div>
                     <div class="flex justify-between">
                        <span class="text-sm font-medium text-gray-600">% Acumulado na Data:</span>
                        <span class="text-sm text-gray-800 font-semibold">${(percAcumulado * 100).toFixed(2)}%</span>
                    </div>
                    <div class="text-center p-3 rounded-lg text-lg font-bold ${statusClass}">
                        ${statusText}
                    </div>
                </div>
            `;

            // 6. Exibir os resultados com uma animação
            resultsContainer.classList.remove('opacity-0');
            resultsContainer.classList.add('result-card');
        });

        // --- Lógica do Modal de Erro ---
        const modal = document.getElementById('error-modal');
        const closeModalBtn = document.getElementById('close-modal-btn');
        const modalMessage = document.getElementById('modal-message');

        function showErrorModal(message) {
            modalMessage.textContent = message;
            modal.classList.remove('hidden');
        }

        closeModalBtn.addEventListener('click', () => {
            modal.classList.add('hidden');
        });

    </script>
</body>
</html>
